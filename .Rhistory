class(results[1,12])
class(results[1,11])
class(results[1,10])
results[,1] <- as.factor(results[1,])
results[,2] <- as.factor(results[2,])
results[,3] <- as.factor(results[3,])
results[,4] <- as.factor(results[4,])
results[,1] <- as.factor(results[,1])
results[,2] <- as.factor(results[,2])
results[,3] <- as.factor(results[,3])
results[,4] <- as.factor(results[,4])
results[,5] <- as.factor(results[,5])
results[,6] <- as.factor(results[,6])
results[,7] <- as.factor(results[,7])
results[,8] <- as.factor(results[,8])
results[,9] <- as.factor(results[,9])
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
summary(rules)
results
results[,10] <- as.factor(results[,10])
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
summary(rules)
print(rules)
dim(results)
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
# if (row$Amigos == row$Oponentes) {
#   next
# }
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
for (i in dim(results)[2]) {
results[,i] <- as.factor(results[,i])
}
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
results[,1] <- as.factor(results[,1])
results[,2] <- as.factor(results[,2])
results[,3] <- as.factor(results[,3])
results[,4] <- as.factor(results[,4])
results[,5] <- as.factor(results[,5])
results[,6] <- as.factor(results[,6])
results[,7] <- as.factor(results[,7])
results[,8] <- as.factor(results[,8])
results[,9] <- as.factor(results[,9])
results[,10] <- as.factor(results[,10])
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
summary(rules)
dim(results)[2]
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
# if (row$Amigos == row$Oponentes) {
#   next
# }
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
dim(results)[2]
for (i in 1:dim(results)[2]) {
results[,i] <- as.factor(results[,i])
}
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
summary(rules)
inspect(rules[1:10])
arules::itemFrequencyPlot(Groceries, topN = 20,
col = brewer.pal(8, 'Pastel2'),
main = 'Relative Item Frequency Plot',
type = "relative",
ylab = "Item Frequency (Relative)")
arules::itemFrequencyPlot(Groceries, topN = 20,
main = 'Relative Item Frequency Plot',
type = "relative",
ylab = "Item Frequency (Relative)")
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
arules::itemFrequencyPlot(results, topN = 20,
col = brewer.pal(8, 'Pastel2'),
main = 'Relative Item Frequency Plot',
type = "relative",
ylab = "Item Frequency (Relative)")
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
inspect(rules[1:10])
inspect(rules[1:50])
inspect(rules[1:50])
itemFrequencyPlot(results, topN = 20, type='absolute')
library(datasets)
data(Groceries)
Groceries
data(results)
results
inspect(rules[1:50])
inspect(rules)
inspect(results[1:10])
inspect(results[1:3])
library(arules)
library(stringr)
setwd("C:\\Users\\bruno\\OneDrive - NuageIT\\Área de Trabalho\\Mineração de Dados\\T1---DM")
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- matrix(nrow = 0, ncol = length(names)+1 )
colnames(results) <- columns
for (i in 1:nrow(df)) {
# if (row$Amigos == row$Oponentes) {
#   next
# }
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.2, target = "rules"))
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.2, target = "rules"))
setwd("C:\\Users\\bruno\\OneDrive - NuageIT\\Área de Trabalho\\Mineração de Dados\\T1---DM")
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
# if (row$Amigos == row$Oponentes) {
#   next
# }
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
for (i in 1:dim(results)[2]) {
results[,i] <- as.factor(results[,i])
}
results
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.2, target = "rules"))
View(results)
rules <- apriori(results,
parameter = list(supp = 0.1, conf = 0.5, target = "rules", minlen = 2, maxlen = 2))
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 2, maxlen = 2
)
)
library(stringr)
setwd("C:\\Users\\bruno\\OneDrive - NuageIT\\Área de Trabalho\\Mineração de Dados\\T1---DM")
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
# if (row$Amigos == row$Oponentes) {
#   next
# }
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
for (i in 1:dim(results)[2]) {
results[,i] <- as.factor(results[,i])
}
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 2, maxlen = 2
)
)
setwd("C:\\Users\\bruno\\OneDrive - NuageIT\\Área de Trabalho\\Mineração de Dados\\T1---DM")
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
setwd("C:\\Users\\bruno\\OneDrive - NuageIT\\Área de Trabalho\\Mineração de Dados\\T1---DM")
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
if (row$Amigos == row$Oponentes) {
next
}
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
results
for (i in 1:nrow(df)) {
print(row$Amigos)
if (row$Amigos == row$Oponentes) {
next
}
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
for (i in 1:nrow(df)) {
print(row$Amigos)
if (as.numeric(row$Amigos) == as.numeric(row$Oponentes)) {
next
}
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
results
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
print(row$Amigos)
if (as.numeric(row$Amigos) == as.numeric(row$Oponentes)) {
next
}
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results[is.na(results)] <- 0
results
for (i in 1:dim(results)[2]) {
results[,i] <- as.factor(results[,i])
}
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 3, maxlen = 3
)
)
print(rules)
print(rules[1:10])
rules[1:10]
rules
for (i in 1:nrow(df)) {
print(row$Amigos)
if (as.numeric(row$Amigos) == as.numeric(row$Oponentes)) {
next
}
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results
for (i in 1:nrow(df)) {
print(row$Amigos)
if (row$Amigos == row$Oponentes) {
next
}
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results
library(arules)
library(stringr)
setwd("C:\\Users\\bruno\\OneDrive - NuageIT\\Área de Trabalho\\Mineração de Dados\\T1---DM")
df1 <- read.csv("./_ASSOC_BGFriends_01.csv", stringsAsFactors = TRUE)
df2 <- read.csv("./_ASSOC_BGFriends_02.csv", stringsAsFactors = TRUE)
df <- rbind(df1, df2)
names <- c()
for (i in 1:nrow(df)) {
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
names <- c(names, splited)
}
names <- unique(unlist(names))
columns <- c(names, "Win")
results <- data.frame(matrix(nrow = 0, ncol = length(names)+1 ), stringsAsFactors = TRUE)
colnames(results) <- columns
for (i in 1:nrow(df)) {
# print(row$Amigos)
# if (row$Amigos == row$Oponentes) {
#   next
# }
row <- df[i,]
row$Jogadore.a.s <- str_replace_all(row$Jogadore.a.s,"\xe7", "ç")
name <- iconv(tolower(gsub(" ","", row$Jogadore.a.s)), to = "ASCII//TRANSLIT")
splited <- unlist(strsplit(name, split = ","))
isWin <- row$Amigos > row$Oponentes
for (j in 1:length(splited)) {
results[i, splited[j]] <- 1
results[i, "Win"] <- isWin
}
}
results
results[is.na(results)] <- 0
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 3, maxlen = 3
)
)
inspect(rules)
for (i in 1:dim(results)[2]) {
results[,i] <- as.factor(results[,i])
}
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 3, maxlen = 3
)
)
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 3
)
)
inspect(rules)
a    <- c(1,1,0,0,1)
b    <- c(0,1,0,1,1)
c    <- c(0,1,1,0,1)
goal <- c(1,0,1,0,1)
myDF <- cbind(a,b,c,goal)
print(myDF)
class(myDF[1,1])
rules <- apriori(myDF,parameter = list(target='rules'))
print(rules)
summary(rules)
inspect(rules)
class(myDF)
rules <- apriori(myDF,parameter = list(target='rules', minlen = 3))
rules <- apriori(myDF,parameter = list(target='rules', minlen = 3, maxlen = 3))
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 3
)
)
inspect(rules)
summary(rules)
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 1
)
)
inspect(rules)
summary(rules)
rules <- apriori(results,
parameter = list(
supp = 0.1, conf = 0.5, target = "rules",
minlen = 1, maxlen = 2
rules <- apriori(results,
